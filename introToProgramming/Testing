#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 11 12:07:12 2019

@author: AJRasure
"""

import matplotlib.pyplot as plt
import numpy as np
#
#r = np.arange(0, 2, 0.01)
#theta = 2 * np.pi * r
#
#ax = plt.subplot( projection='polar')
#ax.plot(theta, r)
#ax.set_rmax(2)
#ax.set_rticks([0.5, 1, 1.5, 2])  # Less radial ticks
#ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
#ax.grid(True)
#ax.set_title("A line plot on a polar axis", va='bottom')
#
#
#np.random.seed(19680801)
#
## example data
#mu = 100  # mean of distribution
#sigma = 15  # standard deviation of distribution
#x = mu + sigma * np.random.randn(437)
#
#num_bins = 100
#
#fig, ax = plt.subplots(2,1)
#
## the histogram of the data
#n, bins, patches = ax.hist(x, num_bins, density=1)
#
## add a 'best fit' line
#y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *
#     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))
#ax.plot(bins, y, '--')
#ax.set_xlabel('Smarts')
#ax.set_ylabel('Probability density')
#ax.set_title(r'Histogram of IQ: $\mu=100$, $\sigma=15$')
#
## Tweak spacing to prevent clipping of ylabel
#fig.tight_layout()
#
#
#np.random.seed(19680801)
#data = np.random.randn(2, 100)
#
#with plt.xkcd():
#    # Based on "Stove Ownership" from XKCD by Randall Monroe
#    # http://xkcd.com/418/
#
##    fig = plt.figure()
#    ax = fig.add_axes((0.1, 0.2, 0.8, 0.7))
#    ax.spines['right'].set_color('none')
#    ax.spines['top'].set_color('none')
#    plt.xticks([])
#    plt.yticks([])
#    ax.set_ylim([-30, 10])
#
#    data = np.ones(100)
#    data[70:] -= np.arange(30)
#
#    plt.annotate(
#        'THE DAY BEGAN TAKING \n COMPUTER PROGRAMING \n FOR PROBLEM SOLVING',
#        xy=(70, 1), arrowprops=dict(arrowstyle='->'), xytext=(15, -10))
#
#    plt.plot(data)
#
#    plt.xlabel('TIME')
#    plt.ylabel('MENTAL HEALTH')
#    fig.text(
#        0.5, 0.05,
#        '"PROGRAMING" AS A MATH MAJOR',
#        ha='center')
#plt.show()
#
##ax = plt.subplot(331, projection='polar')
##ax.plot(theta, r)
##ax.set_rmax(2)
##ax.set_rticks([0.5, 1, 1.5, 2])  # Less radial ticks
##ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
##ax.grid(True)
#
##ax.set_title("A line plot on a polar axis", va='bottom')
##plt.show()
#%%
""" Pythagorean Tripple"""

my_array = np.zeros([0,4])
#my_array = np.vstack([my_array, np.array([1,2,3,4])])

for ii in range (8):
    my_array = np.vstack([my_array,np.array([4*ii, 4*ii+1, 4*ii+2, 4*ii+3])])
print(my_array)

#%%
""" Primality trick"""

def prime_check(n):
    
    isPrime = True
    
    for ii in range (2,n):
        if(ii % n ==0):
            isPrime = False
    
    return isPrime
#%%
"""Collatz Conjecture"""
import numpy as np
import matplotlib.pyplot as plt

Orgin = 7
colNumb = Orgin

colSeq = [colNumb]
while colNumb !=1:
    if colNumb % 2 == 0:
        colNumb = colNumb / 2
    else:
        colNumb = (3*colNumb) +1
    colSeq.append(colNumb)

print(colSeq)
print(len(colSeq))
listx = np.linspace(1,len(colSeq),len(colSeq))
plt.plot(listx,colSeq)

if colNumb == 1:
    print("Starting from {}, The Collatz Sequenced ended after {} terms.".format(Orgin,itter))
else:
    print(Orgin)
    print("Starting from {}, The Collatz Sequence failed to reach 1 after {} terms ".format(Orgin, termLim))

#%%
"""Collatz in another way"""
import numpy as np
import matplotlib.pyplot as plt

r_n = lambda n: n/2
t_n = lambda n: 3*n +1

n = 10
j= 1
f = 3
#Orgin = 55
Orgin = 4**j*((4**j*(((4**n-1)/3)*4**j -1)/3) - 1)/3  #(4**n-1)/3

termLim =  100000

colNumb = Orgin
colSeq = [colNumb]
itter = 1

for ii in range (0,termLim-1):
    if colNumb % 2 ==0:
        colNumb = r_n(colNumb)
    else:
        colNumb = t_n(colNumb)
    colSeq.append(colNumb)
    itter +=1
    if colNumb == 1:
        break
    
print(colSeq)
listx = np.linspace(1,len(colSeq),len(colSeq))
plt.plot(listx,colSeq)

if colNumb == 1:
    print("Starting from {}, The Collatz Sequenced ended after {} terms.".format(Orgin,itter))
else:
    print(Orgin)
    print("Starting from {}, The Collatz Sequence failed to reach 1 after {} terms ".format(Orgin, termLim))

#%%
"""Goldbach 2
need prime nubers less than a number
need the square of numbers less than the number
"""

#PRIME CHECK
# Checks to see if the prime value contendor is a multiple of any previous prime.
# If it is, then it is not prime.
# As 2 is the first prime, this eliminates a need for an even check
import numpy as np
import time

def prime_check(pCan):
    isPrime = True
    
    for ii in range (2,pCan):
        if pCan % ii == 0:
            isPrime = False
   
    return isPrime
def Goldbach(num):           
    N = num
    Goldtrue = False
    for ii in range (1,N):
        if prime_check(ii):
            x = np.sqrt((N-ii)/2.0)
            if (x).is_integer():
                Goldtrue = True
                break

    return Goldtrue

tic = time.time()    

truth = True
low = 1
high = 1000000


for ii in range(low,high):
    if prime_check(ii)==False and ii%2 == 1:
        if Goldbach(ii) == False:
            print("\nAt {}, the second Goldbach Conjecture is False.".format(ii))
            break
        else:
            print('Goldbach holds for {}.'.format(ii))

toc = time.time()

print("\nProgram took {:.4f} seconds to complete!!!".format(toc-tic))

#%%
import time
low = 4
high = 2000

#for ii in range(low,high,2):
#    print(ii)
#    print("yay")
#    gbCheck = False
#    while gbCheck == False:
#        for jj in range (1,ii):
#            if prime_check(jj):
#                for kk in range (1,jj):
#                    if prime_check(kk): 
#                        if jj + kk == ii:
#                            gbCheck = True
#    print("{} is {}.".format(ii,gbCheck))

#find 2 primes that add to a specified number

tic = time.time()
for ii in range(low,high,2):
    gbCheck = False
    while gbCheck == False:
        for jj in range(1,ii):
            if prime_check(jj):
                x = ii - jj
                if prime_check(x):
                    gbCheck = True

    print("Yay!!! \n{} is {}. \n".format(ii,gbCheck))
    print()
toc = time.time()

print("Program took {:.4f} seconds to complete!!!".format(toc-tic))            
#%%
""" Zero Divisor
Determine what elements of Z_m are zero divisors
"""
import time
import numpy as np

tic = time.time()

m = 27 #Modulo
mZeros = [] #The set Z_m that are zero divisors
pairs = []

for ii in range (0,m):
    for jj in range (1,m):
        if (ii *jj)%m == 0:
            mZeros.append(ii)
            pair = [ii,jj]
            pairs.append(pair)
mZeros = set(mZeros)
print("The set of numbers that make up the zero devisor for mod{} is:\n{}".format(m,mZeros))
print("There are {} elements in the set".format(len(mZeros)))
print(pairs)

toc = time.time()
print("\nThe program took {:.4f} seconds to complete!!!".format(toc-tic)) 
  
#%%
"""Inverse of Z_m
Determine whitch elements of Z_m have a multiplicative inverse
"""
   
import time
import numpy as np

tic = time.time()

m = 12#Modulo
mOnes = [] #The set Z_m that are multiplicative inverses
pairs = []
for ii in range (0,m):
    for jj in range (1,m):
        if (ii *jj)%m == 1:
            mOnes.append(ii)
            pair = [ii,jj]
            pairs.append(pair)
mOnes = set(mOnes)

print("The set of numbers that make up the inverse for mod{} is:\n{}".format(m,mOnes))
print("There are {} elements in the set".format(len(mOnes)))
print()
print(pairs)
toc = time.time()

print("\nThe program took {:.4f} seconds to complete!!!".format(toc-tic))

#%%
"""function thing"""

import time
import numpy as np


tic = time.time()

def f(x_int):
    xStr = str(x_int)
    myList = list(xStr)
    
    for ii in range (len(myList)):
        myList[ii] = int(myList[ii])
        
    return myList


#for the what number x is the sum of the digits of x equal to y and the sum of the digits of y are equal to x

N = 5000
m = 13
foundList =[]
yayitter = 0
booitter = 0
yayList=[]
for ii in range(10,N):
    x = ii
    y = sum(f(x))
    
    if x%m == sum(f(y))%m:
        print("yay!")
        foundList.append(x)
        print("({},{})".format(x,y))
        yayitter += 1
        yay = [x,y]
        yayList.append(yay)
        
    else:
        print("boo!")
        print("({},{})".format(x,y))
        booitter+=1

print(yayList)
print("{} yays , {} boos.".format(yayitter,booitter))


toc = time.time()
print("\nThe program took {:.4f} seconds to complete!!!".format(toc-tic))   
#%%
""" Find Divisors
Write a program that does the following:
â€¢ Write a def function that takes an integer n as input, and returns a list containing all the proper divisors of n.
â€¢ Using this function, print out all proper divisors of some number.

"""

def FindDivisor(num):
    divList = []
    for ii in range(num):
        if num%ii == 0:
            divList.append(ii)
    return divList
    
#%%%
""" Amicable Numbers
Write a program that does the following:
 Find all amicable numbers up to some upper bound N.
 Print out all amicable numbers found in your program.
"""
import time
tic = time.time()

def FindDivisor(num):
    divList = []
    for ii in range(1,num):
        if num%ii == 0:
            divList.append(ii)
    return divList

N = 2000
amicablePairs = []
nonAmicablePairs = []
for ii in range(1,N+1):   
    x = sum(FindDivisor(ii))   
    if ii == sum(FindDivisor(x)):
        pair = [ii,x]
        amicablePairs.append(pair)
    else:
        pair = [ii,x]
        nonAmicablePairs.append(pair)
        
print("The set of Amicable pairs is:\n",amicablePairs)
toc = time.time()
print("\nThe program took {:.4f} seconds to complete!!!".format(toc-tic)) 
    
#%%
    
"""Quadratic Residues

"""

import time
import numpy as np

tic = time.time()
    
m = 11#Modulo
quads = [] #The set Z_m that are multiplicative inverses
pairs = []
for ii in range (0,m):
    for jj in range (0,m):
        if ii == (jj **2) % m:
            quads.append(ii)
            pair = [ii,jj]
            pairs.append(pair)
quads = set(quads)  
    
print("The set of numbers that make up the quadratic residues for mod{} is:\n{}".format(m,quads))
print("There are {} elements in the set".format(len(quads)))
print()
print(pairs)
toc = time.time()

print("\nThe program took {:.4f} seconds to complete!!!".format(toc-tic))
#%%

import time
import numpy as np

tic = time.time()

def prime_check(pCan):
    isPrime = True
    
    for ii in range (2,pCan):
        if pCan % ii == 0:
            isPrime = False
   
    return isPrime
    
p = 1
P = 200
countList = np.zeros([0,2])
neg_one = np.zeros([0,2])

for jj in range (p,P+1):
    
    if prime_check(jj):
        quads = []
        
        appears = "False"
        for ii in range (0,jj):
            num = (ii**2)%jj
            quads.append(num)
            
            if (jj - 1) == num:
                appears = "True"
                
        quads = set(quads)
        count = len(quads)
        countList = np.vstack([countList,np.array([jj,count])])
        neg_one = np.vstack([neg_one,np.array([jj,appears])])

print("What follows is the list of Quadratic Residues for between {} and {}".format(p,P))
print(countList)
print("What follows is the list between {} and {} and if the prime minus one is a quadratic residue".format(p,P))
print(neg_one)

#for ii in range (0,len(countList)):
#    print(countList[ii,1])
toc = time.time()

print("\nThe program took {:.4f} seconds to complete!!!".format(toc-tic))    
    
#%%

""" Newtons Method

itterative method 

starting point Z_o -> initial iterative (initital guess)
z_o ->z_1 -> z_2 ->...

Z_1 = Z_o - f(Z_o)/f'(Z_o)
Z_2 = Z_1 - f(Z_1)/f'(Z_1)
Z_n = Z_(n-1) - f(Z_(n-1))/f'(Z_(n-1))
|Z_(n+1) - Z_n | < Tolerance or stop after N times
"""
import math
import time
import numpy as np
tic = time.time()

r_n = lambda n: 1/100*(n**4+(math.e-2-math.sqrt(2))*n**3 +(2*math.sqrt(2) - math.e*math.sqrt(2)-3-2*math.e)*n**2 +(2*math.sqrt(2)*math.e + 3*math.sqrt(2) - 3*math.e)*n+ 3*math.e*math.sqrt(2))
t_n = lambda n: 1/100*(4*n**3+3*(math.e-2-math.sqrt(2))*n**2 + 2*(2*math.sqrt(2) - math.e*math.sqrt(2)-3-2*math.e)*n + (2*math.sqrt(2)*math.e + 3*math.sqrt(2) - 3*math.e))

TOL = 10**(-4)
tol = 2
inZ = 11
goal = 0
zList = np.zeros([0,2]) 

z = inZ
N = 1000
itter = 0
while tol > TOL and itter < N:
    newZ = z - r_n(z)/t_n(z)
    tol = abs(z-newZ)
    zList = np.vstack([zList,np.array([newZ,tol])])
    z = newZ
    itter += 1
    
print("List of itterations starting at {} until convergence within {} tolerance".format(inZ,TOL))
print(zList) 
if itter == 1000:
    print("Finished early")

"""-2.718,1.414, -1,3, """


    
#%%
"""
starting point Z_o -> initial iterative (initital guess)
z_o ->z_1 -> z_2 ->...

Z_1 = Z_o - f(Z_o)/f'(Z_o)
Z_2 = Z_1 - f(Z_1)/f'(Z_1)
Z_n = Z_(n-1) - f(Z_(n-1))/f'(Z_(n-1))
|Z_(n+1) - Z_n | < Tolerance or stop after N times
"""
import math
import time
import numpy as np
tic = time.time()

r_n = lambda n: math.tan(n)-n- 2
t_n = lambda n: 1/(math.cos(n)**2) - 1

TOL = 10**(-4)
tol = 2
inZ = math.pi/2
goal = 0
zList = np.zeros([0,2]) 

z = inZ
N = 1000
itter = 0
while tol > TOL and itter < N:
    newZ = z - r_n(z)/t_n(z)
    tol = abs(z-newZ)
    zList = np.vstack([zList,np.array([newZ,tol])])
    z = newZ
    itter += 1
    
print("List of itterations starting at {} until convergence within {} tolerance".format(inZ,TOL))
print(zList) 
if itter == 1000:
    print("Finished early")
""" pi/2, -pi/2"""
#%%

"""differintiate polynomial"""

def dDx(px):
    dDx = []
    for ii in range(len(px)):
        dDx.append(px[ii]*ii)
    del dDx[0]
    return dDx

def integrate(px,a,b):
    iPx = [0]
    Pxa = []
    Pxb = []
    defPx = 0
    for ii in range(len(px)):
        iPx.append(px[ii]/(ii+1))
    for ii in range(len(iPx)):
        Pxa.append(iPx[ii]*a**ii)
        Pxb.append(iPx[ii]*b**ii)
        defPx = defPx + Pxb[ii] - Pxa[ii]
    
    return defPx

def evaluate(px,x):
    for ii in range(len(px)):
        px[ii] = px[ii]
    
    return sum(px)
    
p_x = [-9,2,0,-8,4] 
a = 2
b = 0




print("The function evaluated at {} is: {}.".format(a,evaluate(p_x,a)))
print("The derivative of the function evaluated at {} is: {}.".format(a,evaluate(dDx(p_x),a)))
print("the intergral of the function from {} to {} is: {}".format(b,a,integrate(p_x,b,a)))

#%%

""" Division Algorithm

Input: fx,gx
Output: quotient and remeinder (q,r)

q = 0, r = fx

(LT = leading term)
while r !=0 and LT(g) divides LT(f) do
    q = q + LT(r)/LT(gx)
    r = r - (LT(r)/LT(gx))*gx
"""

fx = [-1,0,0,1]
gx = [2,1]
q = [0,0,0,0]
r = fx
  

degree = len(r)-len(gx)
coef = fx[-1]/gx[-1]
r2 = []
for ii in range(degree+1):
    r2.append(0)
for ii in range(-1,-len(gx)-1,-1):    
    r2[ii] = r[degree+1]*gx[ii]

q[degree] = q[degree] + coef
#for ii in range(len(gx)):
#    r2.append(gx[ii])
for ii in range(-1,-len(r2),-1):
    r[ii] = r[ii] -r2[ii]
del r[-1]
degree = len(r)-len(gx)
coef = fx[-1]/gx[-1]
r2 = []
for ii in range(degree+1):
    r2.append(0)
for ii in range(-1,-len(gx)-1,-1):    
    r2[ii] = r[degree+1]*gx[ii]

q[degree] = q[degree] + coef
#for ii in range(len(gx)):
#    r2.append(gx[ii])
for ii in range(-1,-len(r2),-1):
    r[ii] = r[ii] -r2[ii]
del r[-1]
degree = len(r)-len(gx)
coef = fx[-1]/gx[-1]
r2 = []
for ii in range(degree+1):
    r2.append(0)
for ii in range(-1,-len(gx)-1,-1):    
    r2[ii] = r[degree+1]*gx[ii]

q[degree] = q[degree] + coef
#for ii in range(len(gx)):
#    r2.append(gx[ii])
for ii in range(-1,-len(r2),-1):
    r[ii] = r[ii] -r2[ii]
del r[-1]
#%%
import time

for i in range(3):
    print("xx ", end="", flush=True)
print("")

#%%

import math
import time
tic = time.time()

surf = 12017639147
row = (surf + 3)/2
print(row)
#param = []
if (row).is_integer():
    row = int(row)

    offset =1 + (row %3)
    print("offset",offset)
    col = int(offset)

#    row -= int(offset)
    param.append([row,col])
    print(row,col)
    
    total = 0
    while row//2 > col:
       if math.gcd(row,col) == 1:
          total += 1
#          param.append([row,col])

       col += 3
#       param.append([row,col])
       #Print statment below is for diplaying progress. This solution is 
       if col%100000 == 0:
          toc = time.time()
          print("{:.4f}% in {:.4f} seconds".format(col/(row//2)*100,toc-tic))
elif surf == 2:
    total = 1
    print ("total number that reflect {} times is: {}".format(surf,total * 2))
else:
    print("total number that reflect {} times is: 0".format(surf))

toc = time.time()

print("\nThe program took {:.4f} seconds to complete!!!".format(toc-tic)) 
#%%%

"""add polynimials"""

fx = [1,2,3]
gx = [1,2]
nx = []
for ii in range(len(fx)):
    nx.append(0)
for ii in range(len(gx)):
    nx[ii] = fx[ii]+gx[ii]

#%%
def Coef(r,gx):
    coRet =[]
    for ii in range(len(r)-len(gx)+1):
        coRet.append(0)
    coRet[-1] = r[-1]/gx[-1]    
    return coRet

def PolyMult(outer,inner):
    nx = []
    for ii in range(len(inner)+len(outer)-1):
        nx.append(0)
    for ii in range(1,len(inner)+1):
        nx[-ii] = outer[-1]*inner[-ii]
    return nx
 
def PolySub(fx,gx):
    nx = []
    for ii in range(len(fx)):
        nx.append(0)
    for ii in range(len(gx)):
        nx[ii] = fx[ii]-gx[ii]
    return nx

f_x = [-1,0,0,1] #polynomial to be divided (eg. [1,2,3] = 1+2x+3x^2)
g_x = [2,1]     #dividing polynomial #polynomial to be divided (eg. [0,2] = 2x)
#creates quotient list based on fx
q=[]
for ii in range(len(fx)):
    q.append(0)
degree = len(r)-len(g_x)


r = list(f_x)

while degree> 0:
    r2 = PolyMult(Coef(list(r),list(g_x)),g_x)
    q[degree] = q[degree] + Coef(list(r),list(g_x))[-1]
    r = PolySub(r,r2)
    
    del r[-1]
    degree = len(r)-len(g_x)
    
    
if degree == 0:  

    r2 = PolyMult(g_x,Coef(r,g_x))
    q[degree] = q[degree] + Coef(r,g_x)[-1]
    for ii in range(-1,-len(r2)-1,-1):
        r[ii] = r[ii] - r2[ii]
    del r[-1]
    
print(q,r,r2,degree)

#%%
q=[]
for ii in range(len(fx)):
    q.append(0)

r = list(f_x)
  
degree = len(r)-len(g_x) #exponent of LT(fx)/LT(gx)
 
while degree > 0:
#for jj in range(1):
    
    # Where the next r = r - LT(fx)/LT(gx)*gx r2 = LT(fx)/LT(gx)*gx r2
    #establishes r2
    r2 = PolyMult(Coef(list(r),list(g_x)),g_x)
    q[degree] = q[degree] + Coef(list(r),list(g_x))[-1] #places the proper coefficient into the appropriate degreed space in the list
    #creates the next r where r(next) = r(current)-r2
    r = PolySub(r,r2)       
    del r[-1] #removes final 0 from list, 0x^n that will equal zero
        
    degree = len(r)-len(g_x)

if degree == 0:  

    r2 = PolyMult(g_x,Coef(r,g_x))
    q[degree] = q[degree] + Coef(r,g_x)[-1]
    for ii in range(-1,-len(r2)-1,-1):
        r[ii] = r[ii] - r2[ii]
    del r[-1]

# Clean up
#while q[-1] == 0:
#    del q[-1]
#while r[-1] == 0:
#    del r[-1]      
for ii in range(len(q)):
    if ii == 0:      
        print("({:.4})".format(q[ii]), end="")    
    elif q[ii] != 0:
        print("+({:.4f})x^{}".format(q[ii],ii), end="")
for ii in range(len(r)):
    if ii == 0:
        print("+({:.4f})".format(r[ii]), end="")    
    elif r[ii] != 0:
        print("+({:.4f})x^{}".format(r[ii],ii), end="")    